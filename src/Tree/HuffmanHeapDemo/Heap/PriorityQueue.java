package Tree.HuffmanHeapDemo.Heap;

/**
 * 优先级队列接口
 * 
 * 
 * 最大优先级队列，是这样的一种队列结构，它的内部存放着一系列的元素，
 * 每个元素都对应着一个最优级，最大优先级队列不管各元素的入队顺序，
 * 在出队时，总是对应优先级最大的元素出队。比如对许多等待运行的进程来讲，
 * 进程调度器每次都取出一个优先级最高的进程执行一段时间，再取下一个
 * 优先级最高的进程，如此往复，就需要用到像最大优先级队列这样的结构。并且，
 * 最大优先级队列一般还会提供改变队列内元素优先级的操作。
最大优先级队列一般用二叉树来实现。因为考虑到，对于最大优先级队列来讲，
我们关心的只是最大值，因此，这时的二叉树只需要具备下面这个性质，那么就可以实现了：


 * @author 
 * @data 2010-1-5
 * @param <E>
 */
public interface PriorityQueue<E extends Comparable<E>> {
	int size();

	boolean isEmpty();

	//向队列加入元素，添加时会按照优先级别排序
	void add(E elem);

	//取优先高的元素
	E getMin();

	//从优先级队列中删除优先级最高的元素
	E removeMin();
}
